function plot_events(Events, varname, varargin)
   % Plot the variable of interest over time

    ip = inputParser();
    ip.addParameter('Hvar', 'H', @ischar);
    ip.parse(varargin{:});
    Opt.Hvar = ip.Results.Hvar;
    Hvar = Opt.Hvar;

    cols = find(ismember(string(varname), string(Events.cellOfWin_varnames)));
    assert(~isempty(cols), 'Variable %s not found in Events.cellOfWin_varnames', varname);
    plot(Events.times, Events.(Hvar)(:, cols), 'LineStyle', '-.', 'LineWidth', 0.5, 'Color', [0.5 0.5 0.5]);
    hold on;

    % Get the colors for the markers
    colors = get(gca, 'ColorOrder');

    % Loop over each cell in Events.cellOfWindows
    for i = 1:length(Events.cellOfWindows)
        k = find(ismember(string(varname), string(Events.cellOfWin_varnames)));

        % If the event was generated by the specified variable...
        if strcmp(Events.cellOfWin_varnames{i}, varname)
        % Get the start and end times of the events
        eventStartTimes = Events.cellOfWindows{i}(:, 1);
        eventEndTimes = Events.cellOfWindows{i}(:, 2);

        % Get the corresponding values of the variable of interest
        eventStartValues = interp1(Events.times, Events.(Hvar)(:, k), eventStartTimes);
        eventEndValues   = interp1(Events.times, Events.(Hvar)(:, k), eventEndTimes);
        if isempty(eventStartValues)
            warning('No values found for event start times');
        end
        if isempty(eventEndValues)
            warning('No values found for event end times');
        end

        % Plot markers at the start and end of each event
        plot(eventStartTimes, eventStartValues, 'o', 'Color', colors(i, :), 'MarkerSize', 10);
        plot(eventEndTimes, eventEndValues, 'x', 'Color', colors(i, :), 'MarkerSize', 10);

         % Create a patch for each event
        for j = 1:size(Events.cellOfWindows{i}, 1)
            start_time = Events.cellOfWindows{i}(j, 1);
            stop_time = Events.cellOfWindows{i}(j, 2);
            fill_times = [start_time, start_time, stop_time, stop_time];
            fill_ylims = [ylim, fliplr(ylim)];
            
            % Create a single filled region using the fill_times and fill_ylims arrays
            fill(fill_times, fill_ylims, colors(i, :), 'FaceAlpha', 0.1, 'EdgeColor', 'none');
        end

        end
    end

    hold off;

    % Add labels
    xlabel('Time');
    ylabel(varname);
    legend('Behavior', 'Event start', 'Event end');
end

